const db = require('../config/db.js');
const sequelize = require('sequelize');
const logger = require('../config/logger');
const crypto = require("crypto");
var microtime = require('microtime');
var converter = require('number-to-words');
var {
    BeneficiaryBank,
    IFSCCode,
    NameofBeneficiaryAccount,
    PaymentReference,
    existurl,
    key,
    iv,
    appkey,
    appiv,
    androidmerchantId,
    merchantId,
    hdfctestReturnUrl,
    sucessCode,
    responseMessage,
    badRequestcode,
	iosmerchantId,
	iosappkey,
	iosappiv
} = require('../config/env.js');
exports.payment = (req, res , err) => {
    let agentId = 'SYS';
	let { 
            productId, 
			customerId, 
			categoryId, 
			period, 
			interestPayment, 
            depositAmount, 
			rateOfInterest, 
			maturityAmount,
			paymentType,
			reqChannel,
            nomineeName,
			nomineeDob,
			nomineeRelationship,
			guardianName,
			guardianRelationship,
            depositType,
			jointHolderName,
			bankAcctNumber,
			bankName,
			bankAcctHolderName,
			bankIfscCode,
			bankChequeUrl,
			jointHolder2Name
        } = req.body;
    logger.info(
		`${new Date()} || 
		 ${req.originalUrl} || 
		 ${JSON.stringify(req.body)} || 
		 ${req.ip} || 
		 ${req.protocol}`
	);
	if(depositAmount < 50000){
		return res.status(500).send({"responseCode":"500","response":"Deposit Amount Should not be less than Rs 50000"});
	}
	logger.info("REQ BODY==="+JSON.stringify(req.body));
    let channelId = (reqChannel == 'android' ||reqChannel == 'ios') ? 'app' : 'portal';
	let reqMerchantId = (reqChannel == 'android') ? androidmerchantId : (reqChannel == 'ios') ?iosmerchantId :merchantId ;
	let encryptkey = (reqChannel == 'android') ? appkey : (reqChannel == 'ios') ?iosappkey :key;
	let encryptiv =  (reqChannel == 'android') ? appiv : (reqChannel == 'ios') ?iosappiv :iv;
	logger.info ("key details: id="+reqMerchantId+" channelId="+channelId+" reqchannel ==="+reqChannel);
	
	//nomineeName = nomineeName ? nomineeName  : null;
	//nomineeDob = nomineeDob  ? nomineeDob  : null;
	//nomineeRelationship = nomineeRelationship ? nomineeRelationship : null;
    guardianName = guardianName ? guardianName : null;
    guardianRelationship = guardianRelationship ? guardianRelationship : null;
    jointHolderName = jointHolderName ? jointHolderName : null;
	jointHolder2Name = jointHolder2Name ? jointHolder2Name : null;
	bankChequeUrl=(bankChequeUrl=='none' || bankChequeUrl==null)?null:bankChequeUrl;
	depositType=depositType?depositType:'INDIVIDUAL';	
	
    if(productId && customerId && categoryId && period && Number(depositAmount>0) && rateOfInterest && 
        maturityAmount && ((productId =='202' && interestPayment == 0) || (productId =='201' && interestPayment > 0))
        && depositType && bankAcctNumber && bankName && bankAcctHolderName && bankIfscCode) {
		let maturityAmt = 0;
		if (productId=='201'){
			let interestAmount = ((Number(depositAmount) * Number(rateOfInterest)/1200)) * Number(period);
			//var maturityAmt = Math.floor(Number(depositAmount)) + interestAmount;
			if (channelId =='app')
			{
				maturityAmt = Math.floor(Number(depositAmount))+ interestAmount;
			}
			else
			{
				maturityAmt = Math.floor(Number(depositAmount));
			}
			maturityAmt = Math.floor(Number(maturityAmt));
		} else if (productId=='202') {
			let tenure = Number(period) / 12;
			maturityAmt = Number(depositAmount) * Math.pow(1 + (Number(rateOfInterest) / (4 * 100)), 4 *  tenure);
			maturityAmt = Math.floor(Number(maturityAmt));
		}
        
        if (maturityAmt == Number(maturityAmount) && paymentType == "NETBANKING") {
            let Amount = String(depositAmount); 
            let transactionId = String(microtime.now());
			let dt = new Date();
			let currentDate = `${
				dt.getFullYear().toString().padStart(4, '0')}-${
				(dt.getMonth()+1).toString().padStart(2, '0')}-${
				dt.getDate().toString().padStart(2, '0')} ${
				dt.getHours().toString().padStart(2, '0')}:${
				dt.getMinutes().toString().padStart(2, '0')}:${
				dt.getSeconds().toString().padStart(2, '0')}`; 
			let reqData =  {
				"dateTime":currentDate,
				"amount":Amount,
				"isMultiSettlement":"0",
				"custMobile":"9113898212",
				"apiKey":encryptkey,
				"productId":"DEFAULT",
				"instrumentId":"NA",
				"udf5":"NA",
				"cardType":"NA",
				"txnType":"DIRECT",
				"udf3":"NA",
				"udf4":"NA",
				"udf1":"false",
				"type":"1.0",
				"udf2":paymentType,
				"merchantId":reqMerchantId,
				"cardDetails":"NA",
				"custMail":"test@test.com",
				"returnURL":hdfcprodReturnUrl,
				"channelId":"0",
				"txnId":transactionId
			};	
            let encrypt = crypto.createCipheriv('aes-256-cbc', encryptkey, encryptiv);
			let theCipher = encrypt.update(JSON.stringify(reqData), 'utf8', 'base64');
			theCipher += encrypt.final('base64');
            
            db.sequelize.query('select API_PAYMENT_NETBANKING(:transactionId,:channelId,:paymentType,:productId,:customerId,:period,:interestPayment,:categoryId,:rateOfInterest,:maturityAmount,:depositAmount,\
                :nomineeName,:nomineeDob,:nomineeRelationship,:guardianName,:guardianRelationship,:depositType,:jointHolderName,\
                :bankAcctNumber,:bankName,:bankAcctHolderName,:bankIfscCode,:bankChequeUrl,:agentId,:jointHolder2Name) AS "transactionId" from dual',
                {replacements: {transactionId: transactionId,channelId: channelId,paymentType: paymentType,productId: productId, customerId: customerId, period: period,interestPayment: interestPayment,
                categoryId: categoryId, rateOfInterest: rateOfInterest, maturityAmount: maturityAmount,depositAmount: depositAmount,nomineeName: nomineeName, nomineeDob: nomineeDob, nomineeRelationship: nomineeRelationship,
                guardianName: guardianName,guardianRelationship: guardianRelationship,depositType: depositType, jointHolderName: jointHolderName,
                bankAcctNumber: bankAcctNumber, bankName: bankName, bankAcctHolderName: bankAcctHolderName, bankIfscCode: bankIfscCode, bankChequeUrl: bankChequeUrl, agentId: agentId, jointHolder2Name: jointHolder2Name
                }, type: sequelize.QueryTypes.SELECT}
            ).then(results =>{
				logger.info("transactionId=="+JSON.stringify(results));
                if(results.length > 0){
                    if(channelId == 'app'){
                       logger.info("requestchannel after function is executed ======"+reqChannel);
                       return res.status(200).send({
                            "responseCode":sucessCode,
                            "redirectUrl":existurl,
							"paymentType":paymentType,
							"merchantId":reqMerchantId,
                            "transactionId":transactionId,
							"customerId":customerId,
							"reqData":theCipher
                        });
                    } else {
                        return res.status(200).send({
                            "responseCode":sucessCode,
                            "redirectUrl":existurl,
							"paymentType":paymentType,
							"merchantId":reqMerchantId,
                            "transactionId":transactionId,
							"customerId":customerId,
							"reqData":theCipher,
                            "response":[{
                            "redirectUrl":existurl,
							"paymentType":paymentType,
							"merchantId":reqMerchantId,
                            "transactionId":transactionId,
							"customerId":customerId,
							"reqData":theCipher
                            }]
                        });
                    }

                } else {
                    return res.status(500).send({
						"responseCode":500,
						"response":"Technical error. Please try again later"
						});
                }
            }).catch(err => {
					logger.error(err);
                    res.status(500).send({
						data:null, message:err.message
					});
				});

        } else if (maturityAmt == Number(maturityAmount) && paymentType == "RTGS") {
                var transactionId = "TNPFCL"+ String(microtime.now());
                var amount2Words = converter.toWords(depositAmount).replace(/[^a-zA-Z0-9]/g, ' ').replace(/(^\w{1})|(\s{1}\w{1})/g, match => match.toUpperCase());
                
                db.sequelize.query('select API_PAYMENT_NETBANKING(:transactionId,:channelId,:paymentType,:productId,:customerId,:period,:interestPayment,:categoryId,:rateOfInterest,:maturityAmount,:depositAmount,\
                    :nomineeName,:nomineeDob,:nomineeRelationship,:guardianName,:guardianRelationship,:depositType,:jointHolderName,\
                    :bankAcctNumber,:bankName,:bankAcctHolderName,:bankIfscCode,:bankChequeUrl,:agentId,:jointHolder2Name) AS "transactionId" from dual',
                    {replacements: {
						transactionId: transactionId,
						channelId: channelId,
						paymentType: paymentType,
						productId: productId, 
						customerId: customerId, 
						period: period,
						interestPayment: interestPayment,
						categoryId: categoryId, 
						rateOfInterest: rateOfInterest, 
						maturityAmount: maturityAmount,
						depositAmount: depositAmount,
						nomineeName: nomineeName, 
						nomineeDob: nomineeDob, 
						nomineeRelationship: nomineeRelationship,
						guardianName: guardianName,
						guardianRelationship: guardianRelationship,
						depositType: depositType, 
						jointHolderName: jointHolderName,
						bankAcctNumber: bankAcctNumber, 
						bankName: bankName, 
						bankAcctHolderName: bankAcctHolderName, 
						bankIfscCode: bankIfscCode,
						bankChequeUrl: bankChequeUrl, 
						agentId: agentId, 
						jointHolder2Name: jointHolder2Name
                    }, type: sequelize.QueryTypes.SELECT}
                ).then(results =>{

                        if(results.length > 0){
                            return res.status(200).send({
                                "responseCode":"200",
                                "paymentType":paymentType,
								"scheme":productId,
								"period":period,
								"interestRate":rateOfInterest,
								"frequency":interestPayment,
                                "beneficiaryAccountNumber":transactionId,
								"amounttoberemitted":depositAmount,
                                "amountinWords":amount2Words,
								"beneficiaryBank":BeneficiaryBank,
                                "ifscCode":IFSCCode, 
								"nameofBeneficiaryAccount":NameofBeneficiaryAccount, 
                                "paymentNarration":PaymentReference,
                                "response":[{
                                    "paymentType":paymentType,
									"scheme":productId,
									"period":period,
									"interestRate":rateOfInterest,
									"frequency":interestPayment,
                                    "beneficiaryAccountNumber":transactionId,
									"amounttoberemitted":depositAmount,
                                    "amountinWords":amount2Words, 
									"beneficiaryBank":BeneficiaryBank,
                                    "ifscCode":IFSCCode, 
									"nameofBeneficiaryAccount":NameofBeneficiaryAccount, 
                                    "paymentNarration":PaymentReference
                                }]
                            });
                        } else {
                            return res.status(500).send({
								"responseCode":500,
								"response":"Technical error. Please try again later"
							});
                        }
                }).catch(err => {
						logger.error(err);
                        res.status(500).send({
							data:null,
							message: err.message
						});
                    });
        } else {
			return res.status(500).send({
				"responseCode":500,
				"response": "Invalid inputs found. Please retry"
			});
		}
    } else {
        return res.status(400).send({
			"responseCode":badRequestcode,
			"response":responseMessage
		});
    }
}